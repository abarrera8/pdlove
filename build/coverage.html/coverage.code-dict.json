{"/home/travis/build/npmtest/node-npmtest-homebridge-smartthings/test.js":"/* istanbul instrument in package npmtest_homebridge_smartthings */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-smartthings/lib.npmtest_homebridge_smartthings.js":"/* istanbul instrument in package npmtest_homebridge_smartthings */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_homebridge_smartthings = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_homebridge_smartthings = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-smartthings/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-homebridge-smartthings && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_homebridge_smartthings */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_homebridge_smartthings\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_homebridge_smartthings.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_homebridge_smartthings.rollup.js'] =\n            local.assetsDict['/assets.npmtest_homebridge_smartthings.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_homebridge_smartthings.__dirname + '/lib.npmtest_homebridge_smartthings.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-smartthings/node_modules/homebridge-smartthings/index.js":"var PubNub = require('pubnub')\nvar smartthings = require('./lib/smartthingsapi');\nvar http = require('http')\nvar os = require('os');\n\nvar Service, Characteristic, Accessory, uuid, EnergyCharacteristics;\n\nvar SmartThingsAccessory;\n\nmodule.exports = function (homebridge) {\n\tService = homebridge.hap.Service;\n\tCharacteristic = homebridge.hap.Characteristic;\n\tAccessory = homebridge.hap.Accessory;\n\tuuid = homebridge.hap.uuid;\n\n\tSmartThingsAccessory = require('./accessories/smartthings')(Accessory, Service, Characteristic, uuid);\n\n\thomebridge.registerPlatform(\"homebridge-smartthings\", \"SmartThings\", SmartThingsPlatform);\n};\n\nfunction SmartThingsPlatform(log, config) {\n\t// Load Wink Authentication From Config File\n\tthis.app_url = config[\"app_url\"];\n\tthis.app_id = config[\"app_id\"];\n\tthis.access_token = config[\"access_token\"];\n\n\t//This is how often it does a full refresh\n\tthis.polling_seconds = config[\"polling_seconds\"];\n\tif (!this.polling_seconds) this.polling_seconds = 3600; //Get a full refresh every hour.\n\n\t//This is how often it polls for subscription data.\n\tthis.update_method = config[\"update_method\"];\n\tif (!this.update_method) this.update_method='direct';\n\n\tthis.update_seconds = config[\"update_seconds\"];\n\tif (!this.update_seconds) this.update_seconds = 30; //30 seconds is the new default\n\tif (this.update_method==='api' && this.update_seconds<30) \n\t\tthat.log(\"The setting for update_seconds is lower than the SmartThings recommended value. Please switch to direct or PubNub using a free subscription for real-time updates.\");\n\n\tthis.direct_port = config[\"direct_port\"];\n\tif (!this.direct_port) this.direct_port = 8000;\n\t\n\tthis.direct_ip = config[\"direct_ip\"];\n\tif (!this.direct_ip) this.direct_ip = smartthing_getIP();\n\n\tthis.api = smartthings;\n\tthis.log = log;\n\tthis.deviceLookup = {};\n\tthis.firstpoll = true;\n\tthis.attributeLookup = {}\n}\n\nSmartThingsPlatform.prototype = {\n\treloadData: function (callback) {\n\t\tvar that = this;\n\t\tvar foundAccessories = [];\n\t\tthis.log.debug(\"Refreshing All Device Data\");\n\t\tsmartthings.getDevices(function (myList) {\n\t\t\tthat.log.debug(\"Received All Device Data\");\n\t\t\t// success\n\t\t\tif (myList && myList.deviceList && myList.deviceList instanceof Array) {\n\t\t\t\tvar populateDevices = function (devices) {\n\t\t\t\t\tfor (var i = 0; i < devices.length; i++) {\n\t\t\t\t\t\tvar device = devices[i];\n\n\t\t\t\t\t\tvar accessory = undefined;\n\t\t\t\t\t\tif (that.deviceLookup[device.deviceid]) {\n\t\t\t\t\t\t\taccessory = that.deviceLookup[device.deviceid];\n\t\t\t\t\t\t\taccessory.loadData(devices[i]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\taccessory = new SmartThingsAccessory(that, device);\n\n\t\t\t\t\t\t\tif (accessory != undefined) {\n\t\t\t\t\t\t\t\tif ((accessory.services.length <= 1) || (accessory.deviceGroup == \"unknown\")) {\n\t\t\t\t\t\t\t\t\tif (that.firstpoll) that.log(\"Device Skipped - Group \" + accessory.deviceGroup + \", Name \" + accessory.name + \", ID \" + accessory.deviceid + \", JSON: \" + JSON.stringify(device));\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tthat.log(\"Device Added - Group \" + accessory.deviceGroup + \", Name \" + accessory.name + \", ID \" + accessory.deviceid)//+\", JSON: \"+ JSON.stringify(device));\n\t\t\t\t\t\t\t\t\tthat.deviceLookup[accessory.deviceid] = accessory;\n\t\t\t\t\t\t\t\t\tfoundAccessories.push(accessory);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (myList && myList.location) {\n\t\t\t\t\tthat.temperature_unit = myList.location.temperature_scale;\n\t\t\t\t}\n\n\t\t\t\tpopulateDevices(myList.deviceList);\n\t\t\t} else if ((!myList) || (!myList.error)) {\n\t\t\t\tthat.log(\"Invalid Response from API call\");\n\t\t\t} else if (myList.error) {\n\t\t\t\tthat.log(\"Error received type \" + myList.type + ' - ' + myList.message);\n\t\t\t} else {\n\t\t\t\tthat.log(\"Invalid Response from API call\");\n\t\t\t}\n\t\t\tif (callback)\n\t\t\t\tcallback(foundAccessories)\n\t\t\tthat.firstpoll = false;\n\t\t});\n\t},\n\taccessories: function (callback) {\n\t\tthis.log(\"Fetching Smart Things devices.\");\n\n\t\tvar that = this;\n\t\tvar foundAccessories = [];\n\t\tthis.deviceLookup = [];\n\t\tthis.unknownCapabilities = [];\n\t\tthis.knownCapabilities = [\"Switch\", \"Color Control\", \"Battery\", \"Polling\", \"Lock\", \"Refresh\", \"Lock Codes\", \"Sensor\", \"Actuator\",\n\t\t\t\"Configuration\", \"Switch Level\", \"Temperature Measurement\", \"Motion Sensor\", \"Color Temperature\",\n\t\t\t\"Contact Sensor\", \"Three Axis\", \"Acceleration Sensor\", \"Momentary\", \"Door Control\", \"Garage Door Control\",\n\t\t\t\"Relative Humidity Measurement\", \"Presence Sensor\", \"Thermostat\", \"Energy Meter\", \"Power Meter\",\n\t\t\t\"Thermostat Cooling Setpoint\", \"Thermostat Mode\", \"Thermostat Fan Mode\", \"Thermostat Operating State\",\n\t\t\t\"Thermostat Heating Setpoint\", \"Thermostat Setpoint\", \"Indicator\"];\n\t\tthis.temperature_unit = 'F';\n\n\t\tsmartthings.init(this.app_url, this.app_id, this.access_token);\n\n\t\tthis.reloadData(function (foundAccessories) {\n\t\t\tthat.log(\"Unknown Capabilities: \" + JSON.stringify(that.unknownCapabilities));\n\t\t\tcallback(foundAccessories);\n\t\t\tsetInterval(that.reloadData.bind(that), that.polling_seconds * 1000);\n\t\t\t//Initialize Update Mechanism for realtime-ish updates.\n\t\t\tif (that.update_method==='api') //Legacy API method.\n\t\t\t\tsetInterval(that.doIncrementalUpdate.bind(that), that.update_seconds * 1000);\n\n\t\t\telse if (that.update_method==='pubnub') { //Uses user's PubNub account\n\t\t\t\tthat.api.getSubscriptionService(function(data) {\n\t\t\t\t\tpubnub = new PubNub({ subscribeKey : data.pubnub_subscribekey });\n\t\t\t\t\tpubnub.addListener({ \n\t\t\t\t\t\t\tstatus: function(statusEvent) { if (statusEvent.category==='PNReconnectedCategory') that.reloadData(null); },\n\t\t\t\t\t\t\tmessage: function(message) { that.processFieldUpdate(message.message, that); } });\n        \t\t\tpubnub.subscribe({ channels: [ that.pubnub_channel ] });\t\n\t\t\t\t});\n\t\t\t}\n\n\t\t\telse if (that.update_method=='direct') { //The Hub sends updates to this module using http\n\t\t\t\tsmartthings_SetupHTTPServer(that);\n\t\t\t\tsmartthings.startDirect(null,that.direct_ip, that.direct_port);\n\t\t\t}\n\t\t});\n\t},\n\taddAttributeUsage: function(attribute, deviceid, mycharacteristic) {\n\t\tif (!this.attributeLookup[attribute])\n\t\t\tthis.attributeLookup[attribute] = {};\n\t\tif (!this.attributeLookup[attribute][deviceid])\n\t\t\tthis.attributeLookup[attribute][deviceid] = [];\n\t\tthis.attributeLookup[attribute][deviceid].push(mycharacteristic);\n\t},\n\n\tdoIncrementalUpdate: function() {\n\t\tvar that=this;\n\t\tsmartthings.getUpdates(function(data) { that.processIncrementalUpdate(data, that)});\n\t},\n\n\tprocessIncrementalUpdate: function(data, that) {\n\t\tif (data && data.attributes && data.attributes instanceof Array) {\n\t\t\tfor (var i = 0; i < data.attributes.length; i++) {\n\t\t\t\tthat.processFieldUpdate(data.attributes[i], that);\n\n\t\t\t}\n\t\t}\n\t},\n\n\tprocessFieldUpdate: function(attributeSet, that) {\n\t\t//that.log(\"Processing Update\");\n\t\tif (!((that.attributeLookup[attributeSet.attribute]) && (that.attributeLookup[attributeSet.attribute][attributeSet.device]))) return;\n\t\tvar myUsage = that.attributeLookup[attributeSet.attribute][attributeSet.device];\n\t\tif (myUsage instanceof Array) {\n\t\t\tfor (var j = 0; j < myUsage.length; j++) {\n\t\t\t\tvar accessory = that.deviceLookup[attributeSet.device];\n\t\t\t\tif (accessory) {\n\t\t\t\t\taccessory.device.attributes[attributeSet.attribute] = attributeSet.value;\n\t\t\t\t\tmyUsage[j].getValue();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\nfunction smartthing_getIP() {\n\tvar myIP = '';\n\tvar ifaces = os.networkInterfaces();\n\tObject.keys(ifaces).forEach(function (ifname) {\n  \t\tvar alias = 0;\n\t\tifaces[ifname].forEach(function (iface) {\n    \t\tif ('IPv4' !== iface.family || iface.internal !== false) {\n      \t\t\t// skip over internal (i.e. 127.0.0.1) and non-ipv4 addresses\n      \t\t\treturn;\n    \t\t}\n    \tmyIP = iface.address;\n  \t\t});\n\t});\n\treturn myIP;\n}\nfunction smartthings_SetupHTTPServer(mySmartThings) {\n\t//Get the IP address that we will send to the SmartApp. This can be overridden in the config file.\n\t\n\t//Start the HTTP Server\n\tconst server = http.createServer(function(request,response) { \n\t\t\t\tsmartthings_HandleHTTPResponse(request, response, mySmartThings)});\n\n\tserver.listen(mySmartThings.direct_port, (err) => {  \n  \t\tif (err) {\n    \t\tmySmartThings.log('something bad happened', err);\n\t\t\treturn '';\n  \t\t}\n\t\tmySmartThings.log(`Direct Connect Is Listening On ${mySmartThings.direct_ip}:${mySmartThings.direct_port}`);\n\t})\n\treturn 'good';\n}\n\nfunction smartthings_HandleHTTPResponse(request, response, mySmartThings)  {\n\tif (request.url=='/initial') \n\t\tmySmartThings.log(\"SmartThings Hub Communication Established\");\nif (request.url=='/update') {\n\t\tvar newChange = { device: request.headers[\"change_device\"],\n\t\t\t\t\t\t  attribute: request.headers[\"change_attribute\"],\n\t\t\t\t\t\t  value: request.headers[\"change_value\"],\n\t\t\t\t\t\t  date: request.headers[\"chande_date\"]};\n\t\tmySmartThings.processFieldUpdate(newChange, mySmartThings);\n\t\t}\n\tresponse.end('OK');\n}","/home/travis/build/npmtest/node-npmtest-homebridge-smartthings/node_modules/homebridge-smartthings/lib/smartthingsapi.js":"var http = require('https');\nvar url = require('url');\n\nvar app_host;\nvar app_port;\nvar app_path;\nvar access_token;\n\nfunction _http(data, callback) {\n    //console.log(\"Calling Smartthings\");\n    var options = {\n        hostname: app_host,\n        port: app_port,\n        path: app_path + data.path + \"?access_token=\" + access_token,\n        method: data.method,\n        headers: {}\n    };\n\n    var that = this;\n    if (data.data) {\n        data.data = JSON.stringify(data.data);\n        options.headers['Content-Length'] = Buffer.byteLength(data.data);\n        options.headers['Content-Type'] = \"application/json\";\n    }\n\n    var str = '';\n    var req = http.request(options, function (response) {\n\n        response.on('data', function (chunk) {\n            str += chunk;\n        });\n\n        response.on('end', function () {\n            if (data.debug) console.log(\"response in http:\", str);\n            try {\n                str = JSON.parse(str);\n            } catch (e) {\n                if (data.debug) {\n                    console.log(e.stack);\n                    console.log(\"raw message\", str);\n                }\n                str = undefined;\n            }\n\n            if (callback) { callback(str); callback=undefined; };\n        });\n    });\n\n    if (data.data) {\n        req.write(data.data);\n    }\n\n    req.end();\n\n    req.on('error', function (e) {\n        console.log(\"error at req: \", e.message);\n        if (callback) { callback(); callback=undefined; };\n    });\n    \n\n}\n\nfunction POST(data, callback) {\n    data.method = \"POST\";\n    _http(data, callback);\n}\n\nfunction PUT(data, callback) {\n    data.method = \"PUT\";\n    _http(data, callback);\n}\n\nfunction GET(data, callback) {\n    data.method = \"GET\";\n    _http(data, callback);\n}\n\nfunction DELETE(data, callback) {\n    data.method = \"DELETE\";\n    _http(data, callback);\n}\n\nvar smartthings = {\n    init: function (inURL, inAppID, inAccess_Token) {\n        var appURL = url.parse(inURL);\n\n        app_host = appURL.hostname || \"graph.api.smartthings.com\";\n        app_port = appURL.port || \"443\";\n        app_path = (appURL.path || \"/api/smartapps/installations/\") + inAppID + \"/\";\n        access_token = inAccess_Token;\n    },\n    getDevices: function (callback) {\n        GET({ debug: false, path: 'devices' }, function (data) {\n            if (callback) { callback(data); callback=undefined; };\n        })\n    },\n    getDevice: function (deviceid, callback) {\n        GET({ debug: false, path: deviceid + '/query' }, function (data) {\n            if (data) {\n                if (callback) { callback(data); callback=undefined; };\n            } else {\n                if (callback) { callback(); callback=undefined; };;\n            }\n        })\n    },\n    getUpdates: function (callback) {\n        GET({ debug: false, path: 'getUpdates' }, function (data) {\n            if (callback) { callback(data); callback=undefined; };;\n        })\n    },\n    runCommand: function (callback, deviceid, command, values) {\n        POST({ debug: false, path: deviceid + '/command/' + command, data: values }, function (data) {\n            if (callback) { callback(); callback=undefined; };;\n        })\n    },\n    startDirect: function (callback, myIP, myPort) {\n        GET({ debug: false, path: 'startDirect/' + myIP + '/' + myPort }, function (data) {\n            if (callback) { callback(); callback=undefined; };;\n        })\n    },\n    getSubscriptionService: function (callback) {\n        GET({ debug: false, path: 'getSubcriptionService' }, function (data) {\n            if (callback) { callback(data); callback=undefined; };;\n        })\n    }\n}\nmodule.exports = smartthings;","/home/travis/build/npmtest/node-npmtest-homebridge-smartthings/node_modules/homebridge-smartthings/accessories/smartthings.js":"var inherits = require('util').inherits;\n\nvar Accessory, Service, Characteristic, uuid, EnergyCharacteristics;\n\n/*\n *   SmartThings Accessory\n */\n\nmodule.exports = function(oAccessory, oService, oCharacteristic, ouuid) {\n    if (oAccessory) {\n        Accessory = oAccessory;\n        Service = oService;\n        Characteristic = oCharacteristic;\n        EnergyCharacteristics = require('../lib/customCharacteristics').EnergyCharacteristics(Characteristic)\n\n        uuid = ouuid;\n\n        inherits(SmartThingsAccessory, Accessory);\n        SmartThingsAccessory.prototype.loadData = loadData;\n        SmartThingsAccessory.prototype.getServices = getServices;\n\n    }\n    return SmartThingsAccessory;\n};\nmodule.exports.SmartThingsAccessory = SmartThingsAccessory;\n\nfunction SmartThingsAccessory(platform, device) {\n\n    this.deviceid = device.deviceid;\n    this.name = device.name;\n    this.platform = platform;\n    this.state = {};\n    this.device = device;\n\n    var idKey = 'hbdev:smartthings:' + this.deviceid;\n    var id = uuid.generate(idKey);\n\n    Accessory.call(this, this.name, id);\n    var that = this;\n\n    //Get the Capabilities List\n    for (var index in device.capabilities) {\n        if ((platform.knownCapabilities.indexOf(index) == -1) && (platform.unknownCapabilities.indexOf(index) == -1))\n            platform.unknownCapabilities.push(index);\n    }\n\n    this.getaddService = function(Service) {\n        var myService = this.getService(Service);\n        if (!myService) myService = this.addService(Service);\n        return myService\n    };\n\n    this.deviceGroup = \"unknown\"; //This way we can easily tell if we set a device group\n\tvar thisCharacteristic;\n\t\n    if (device.capabilities[\"Switch Level\"] !== undefined) {\n        if (device.commands.levelOpenClose) {\n            //This is a Window Shade\n            this.deviceGroup = \"shades\"\n\n            thisCharacteristic = this.getaddService(Service.WindowCovering).getCharacteristic(Characteristic.TargetPosition)\n            thisCharacteristic.on('get', function(callback) { callback(null, parseInt(that.device.attributes.level)); });\n            thisCharacteristic.on('set', function(value, callback) { that.platform.api.runCommand(callback, that.deviceid, \"setLevel\", { value1: value }); });\n\t\t\tthat.platform.addAttributeUsage(\"level\", this.deviceid, thisCharacteristic);\n\n            thisCharacteristic = this.getaddService(Service.WindowCovering).getCharacteristic(Characteristic.CurrentPosition)\n            thisCharacteristic.on('get', function(callback) { callback(null, parseInt(that.device.attributes.level)); });\n\t\t\tthat.platform.addAttributeUsage(\"level\", this.deviceid, thisCharacteristic);\n\t\t\t\n        } else if (device.commands.lowSpeed) {\n            //This is a Ceiling Fan\n            this.deviceGroup = \"fans\"\n            \n            thisCharacteristic = this.getaddService(Service.Fan).getCharacteristic(Characteristic.On)\n            thisCharacteristic.on('get', function(callback) { callback(null, that.device.attributes.switch == \"on\"); })\n            thisCharacteristic.on('set', function(value, callback) {\n                    if (value)\n                        that.platform.api.runCommand(callback, that.deviceid, \"on\");\n                    else\n                        that.platform.api.runCommand(callback, that.deviceid, \"off\"); });\n\t\t        that.platform.addAttributeUsage(\"switch\", this.deviceid, thisCharacteristic);\n\n\t        thisCharacteristic = this.getaddService(Service.Fan).getCharacteristic(Characteristic.RotationSpeed)\n            thisCharacteristic.on('get', function(callback) { callback(null, parseInt(that.device.attributes.level)); });\n            thisCharacteristic.on('set', function(value, callback) { \n            \t    if (value > 0)\n            \t    \tthat.platform.api.runCommand(callback, that.deviceid, \"setLevel\", {value1: value }); });\n\t\t\tthat.platform.addAttributeUsage(\"level\", this.deviceid, thisCharacteristic);\n        \n        } else {\n            this.deviceGroup = \"lights\";\n            thisCharacteristic = this.getaddService(Service.Lightbulb).getCharacteristic(Characteristic.On)\n            thisCharacteristic.on('get', function(callback) { callback(null, that.device.attributes.switch == \"on\"); });\n            thisCharacteristic.on('set', function(value, callback) {\n                    if (value)\n                        that.platform.api.runCommand(callback, that.deviceid, \"on\");\n                    else\n                        that.platform.api.runCommand(callback, that.deviceid, \"off\"); });\n\t\t\tthat.platform.addAttributeUsage(\"switch\", this.deviceid, thisCharacteristic);\n\n            thisCharacteristic = this.getaddService(Service.Lightbulb).getCharacteristic(Characteristic.Brightness)\n            thisCharacteristic.on('get', function(callback) { callback(null, parseInt(that.device.attributes.level)); });\n            thisCharacteristic.on('set', function(value, callback) { that.platform.api.runCommand(callback, that.deviceid, \"setLevel\", { value1: value }); });\n\t\t\tthat.platform.addAttributeUsage(\"level\", this.deviceid, thisCharacteristic);\n\t\t\t\n            if (device.capabilities[\"Color Control\"] !== undefined) {\n\t\t\t\tthisCharacteristic = this.getaddService(Service.Lightbulb).getCharacteristic(Characteristic.Hue)\n                thisCharacteristic.on('get', function(callback) { callback(null, Math.round(that.device.attributes.hue*3.6)); });\n                thisCharacteristic.on('set', function(value, callback) { that.platform.api.runCommand(callback, that.deviceid, \"setHue\", { value1: Math.round(value/3.6) }); });\n\t\t\t\tthat.platform.addAttributeUsage(\"hue\", this.deviceid, thisCharacteristic);\n\n                thisCharacteristic = this.getaddService(Service.Lightbulb).getCharacteristic(Characteristic.Saturation)\n                thisCharacteristic.on('get', function(callback) { callback(null, parseInt(that.device.attributes.saturation)); });\n                thisCharacteristic.on('set', function(value, callback) { that.platform.api.runCommand(callback, that.deviceid, \"setSaturation\", { value1: value }); });\n\t\t\t\tthat.platform.addAttributeUsage(\"saturation\", this.deviceid, thisCharacteristic);\n            }\n        }\n    }\n\n    if (device.capabilities[\"Garage Door Control\"] !== undefined) {\n        this.deviceGroup = \"garage_doors\";\n\t\t\n        thisCharacteristic = this.getaddService(Service.GarageDoorOpener).getCharacteristic(Characteristic.TargetDoorState)\n        thisCharacteristic.on('get', function(callback) {\n                if (that.device.attributes.door == 'closed' || that.device.attributes.door == 'closing')\n                    callback(null, Characteristic.TargetDoorState.CLOSED);\n                else if (that.device.attributes.door == 'open' || that.device.attributes.door == 'opening')\n                    callback(null, Characteristic.TargetDoorState.OPEN); });\n        thisCharacteristic.on('set', function(value, callback) {\n                if (value == Characteristic.TargetDoorState.OPEN) {\n                    that.platform.api.runCommand(callback, that.deviceid, \"open\");\n                    that.device.attributes.door = \"opening\";\n                } else if (value == Characteristic.TargetDoorState.CLOSED) {\n                    that.platform.api.runCommand(callback, that.deviceid, \"close\");\n                    that.device.attributes.door = \"closing\";\n                } });\n\t\tthat.platform.addAttributeUsage(\"door\", this.deviceid, thisCharacteristic);\n\t\t\t\n        thisCharacteristic = this.getaddService(Service.GarageDoorOpener).getCharacteristic(Characteristic.CurrentDoorState)\n        thisCharacteristic.on('get', function(callback) {\n                switch (that.device.attributes.door) {\n                    case 'open':\n                        callback(null, Characteristic.TargetDoorState.OPEN);\n                        break;\n                    case 'opening':\n                        callback(null, Characteristic.TargetDoorState.OPENING);\n                        break;\n                    case 'closed':\n                        callback(null, Characteristic.TargetDoorState.CLOSED);\n                        break;\n                    case 'closing':\n                        callback(null, Characteristic.TargetDoorState.CLOSING);\n                        break;\n                    default:\n                        callback(null, Characteristic.TargetDoorState.STOPPED);\n                        break;\n                }\n            });\n\t\tthat.platform.addAttributeUsage(\"door\", this.deviceid, thisCharacteristic);\n\t\t\t\n        this.getaddService(Service.GarageDoorOpener).setCharacteristic(Characteristic.ObstructionDetected, false);\n    }\n\n    if (device.capabilities[\"Lock\"] !== undefined) {\n        this.deviceGroup = \"locks\";\n\t\t\n        thisCharacteristic = this.getaddService(Service.LockMechanism).getCharacteristic(Characteristic.LockCurrentState)\n        thisCharacteristic.on('get', function(callback) {\n                switch (that.device.attributes.lock) {\n                    case 'locked':\n                        callback(null, Characteristic.LockCurrentState.SECURED);\n                        break;\n                    case 'unlocked':\n                        callback(null, Characteristic.LockCurrentState.UNSECURED);\n                        break;\n                    default:\n                        callback(null, Characteristic.LockCurrentState.UNKNOWN);\n                        break;\n                } });\n\t\tthat.platform.addAttributeUsage(\"lock\", this.deviceid, thisCharacteristic);\n\t\t\n        thisCharacteristic = this.getaddService(Service.LockMechanism).getCharacteristic(Characteristic.LockTargetState)\n        thisCharacteristic.on('get', function(callback) {\n                switch (that.device.attributes.lock) {\n                    case 'locked':\n                        callback(null, Characteristic.LockCurrentState.SECURED);\n                        break;\n                    case 'unlocked':\n                        callback(null, Characteristic.LockCurrentState.UNSECURED);\n                        break;\n                    default:\n                        callback(null, Characteristic.LockCurrentState.UNKNOWN);\n                        break;\n                } });\n        thisCharacteristic.on('set', function(value, callback) {\n\t\tif (value === false) {\n                    value = Characteristic.LockTargetState.UNSECURED;\n                } else if (value === true) {\n                    value = Characteristic.LockTargetState.SECURED;\n                }  \n                switch (value) {\n                    case Characteristic.LockTargetState.SECURED:\n                        that.platform.api.runCommand(callback, that.deviceid, \"lock\");\n                        that.device.attributes.lock = \"locked\";\n                        break;\n                    case Characteristic.LockTargetState.UNSECURED:\n                        that.platform.api.runCommand(callback, that.deviceid, \"unlock\");\n                        that.device.attributes.lock = \"unlocked\";\n                        break;\n                } });\n\t\tthat.platform.addAttributeUsage(\"lock\", this.deviceid, thisCharacteristic);\n\t\t\n    }\n\n//    if (devices.capabilities[\"Valve\"] !== undefined) {\n//        this.deviceGroup = \"valve\";\n// Thinking of implementing this as a Door service.\n//    }\n\n    if (device.capabilities[\"Button\"] !== undefined) {\n        this.deviceGroup = \" button\";\n        \n    }\n    if (device.capabilities[\"Switch\"] !== undefined && this.deviceGroup == \"unknown\") {\n        this.deviceGroup = \"switch\";\n        thisCharacteristic = this.getaddService(Service.Switch).getCharacteristic(Characteristic.On)\n        thisCharacteristic.on('get', function(callback) { callback(null, that.device.attributes.switch == \"on\"); })\n        thisCharacteristic.on('set', function(value, callback) {\n                if (value)\n                    that.platform.api.runCommand(callback, that.deviceid, \"on\");\n                else\n                    that.platform.api.runCommand(callback, that.deviceid, \"off\");\n            });\n\t\tthat.platform.addAttributeUsage(\"switch\", this.deviceid, thisCharacteristic);\n    }\n\n    if ((device.capabilities[\"Smoke Detector\"] !== undefined) && (that.device.attributes.smoke)) {\n        this.deviceGroup = \"detectors\";\n\n        thisCharacteristic = this.getaddService(Service.SmokeSensor).getCharacteristic(Characteristic.SmokeDetected)\n        thisCharacteristic.on('get', function(callback) {\n                if (that.device.attributes.smoke == 'clear')\n                    callback(null, Characteristic.SmokeDetected.SMOKE_NOT_DETECTED);\n                else\n                    callback(null, Characteristic.SmokeDetected.SMOKE_DETECTED);\n            });\n \t\tthat.platform.addAttributeUsage(\"smoke\", this.deviceid, thisCharacteristic);\n   }\n\n    if ((device.capabilities[\"Carbon Monoxide Detector\"] !== undefined) && (that.device.attributes.carbonMonoxide)) {\n        this.deviceGroup = \"detectors\";\n        \n\t\tthisCharacteristic = this.getaddService(Service.CarbonMonoxideSensor).getCharacteristic(Characteristic.CarbonMonoxideDetected)\n        thisCharacteristic.on('get', function(callback) {\n                if (that.device.attributes.carbonMonoxide == 'clear')\n                    callback(null, Characteristic.CarbonMonoxideDetected.CO_LEVELS_NORMAL);\n                else\n                    callback(null, Characteristic.CarbonMonoxideDetected.CO_LEVELS_ABNORMAL);\n            });\n \t\tthat.platform.addAttributeUsage(\"carbonMonoxide\", this.deviceid, thisCharacteristic);\n    }\n\n    if (device.capabilities[\"Motion Sensor\"] !== undefined) {\n        if (this.deviceGroup == 'unknown') this.deviceGroup = \"sensor\";\n        \n\t\tthisCharacteristic = this.getaddService(Service.MotionSensor).getCharacteristic(Characteristic.MotionDetected)\n        thisCharacteristic.on('get', function(callback) { callback(null, (that.device.attributes.motion == \"active\")); });\n \t\tthat.platform.addAttributeUsage(\"motion\", this.deviceid, thisCharacteristic);\n    }\n\n    if (device.capabilities[\"Water Sensor\"] !== undefined) {\n        if (this.deviceGroup == 'unknown') this.deviceGroup = \"sensor\";\n\t\t\n        thisCharacteristic = this.getaddService(Service.LeakSensor).getCharacteristic(Characteristic.LeakDetected)\n        thisCharacteristic.on('get', function(callback) { \n                                var reply = Characteristic.LeakDetected.LEAK_DETECTED;\n                                if (that.device.attributes.water == \"dry\") reply = Characteristic.LeakDetected.LEAK_NOT_DETECTED;\n                    callback(null, reply); });\n \t\tthat.platform.addAttributeUsage(\"water\", this.deviceid, thisCharacteristic);\n    }\n\n    if (device.capabilities[\"Presence Sensor\"] !== undefined) {\n        if (this.deviceGroup == 'unknown') this.deviceGroup = \"sensor\";\n\t\t\n        thisCharacteristic = this.getaddService(Service.OccupancySensor).getCharacteristic(Characteristic.OccupancyDetected)\n        thisCharacteristic.on('get', function(callback) { callback(null, (that.device.attributes.presence == \"present\")); });\n \t\tthat.platform.addAttributeUsage(\"presence\", this.deviceid, thisCharacteristic);\n    }\n\n    if (device.capabilities[\"Relative Humidity Measurement\"] !== undefined) {\n        if (this.deviceGroup == 'unknown') this.deviceGroup = \"sensor\";\n        thisCharacteristic = this.getaddService(Service.HumiditySensor).getCharacteristic(Characteristic.CurrentRelativeHumidity)\n        thisCharacteristic.on('get', function(callback) { callback(null, Math.round(that.device.attributes.humidity)); });\n\t\tthat.platform.addAttributeUsage(\"humidity\", this.deviceid, thisCharacteristic);\n    }\n\n    if (device.capabilities[\"Temperature Measurement\"] !== undefined) {\n        if (this.deviceGroup == 'unknown') this.deviceGroup = \"sensor\";\n        thisCharacteristic = this.getaddService(Service.TemperatureSensor).getCharacteristic(Characteristic.CurrentTemperature)\n        thisCharacteristic.on('get', function(callback) {\n                if (that.platform.temperature_unit == 'C')\n                    callback(null, Math.round(that.device.attributes.temperature*10)/10);\n                else\n                    callback(null, Math.round(((that.device.attributes.temperature - 32) / 1.8)*10)/10);\n            });\n\t\tthat.platform.addAttributeUsage(\"temperature\", this.deviceid, thisCharacteristic);\n    }\n\n    if (device.capabilities[\"Contact Sensor\"] !== undefined) {\n        if (this.deviceGroup == 'unknown') this.deviceGroup = \"sensor\";\n        thisCharacteristic = this.getaddService(Service.ContactSensor).getCharacteristic(Characteristic.ContactSensorState)\n        thisCharacteristic.on('get', function(callback) {\n                if (that.device.attributes.contact == \"closed\")\n                    callback(null, Characteristic.ContactSensorState.CONTACT_DETECTED);\n                else\n                    callback(null, Characteristic.ContactSensorState.CONTACT_NOT_DETECTED);\n\n            });\n \t\tthat.platform.addAttributeUsage(\"contact\", this.deviceid, thisCharacteristic);\n   }\n\n    if (device.capabilities[\"Battery\"] !== undefined) {\n        thisCharacteristic = this.getaddService(Service.BatteryService).getCharacteristic(Characteristic.BatteryLevel)\n        thisCharacteristic.on('get', function(callback) { callback(null, Math.round(that.device.attributes.battery)); });\n\t\tthat.platform.addAttributeUsage(\"battery\", this.deviceid, thisCharacteristic);\n\n        thisCharacteristic = this.getaddService(Service.BatteryService).getCharacteristic(Characteristic.StatusLowBattery)\n        thisCharacteristic.on('get', function(callback) {\n                if (that.device.attributes.battery < 0.20)\n                    callback(null, Characteristic.StatusLowBattery.BATTERY_LEVEL_LOW);\n                else\n                    callback(null, Characteristic.StatusLowBattery.BATTERY_LEVEL_NORMAL);\n            });\n\n        this.getaddService(Service.BatteryService).setCharacteristic(Characteristic.ChargingState, Characteristic.ChargingState.NOT_CHARGING);\n\t\tthat.platform.addAttributeUsage(\"battery\", this.deviceid, thisCharacteristic);\n    }\n\n    if (device.capabilities[\"Energy Meter\"] !== undefined) {\n        this.deviceGroup = 'EnergyMeter';\n        thisCharacteristic = this.getaddService(Service.Outlet).addCharacteristic(EnergyCharacteristics.TotalConsumption1)\n        thisCharacteristic.on('get', function(callback) { callback(null, Math.round(that.device.attributes.energy)); });\n\t\tthat.platform.addAttributeUsage(\"energy\", this.deviceid, thisCharacteristic);\n\t}\n\n    if (device.capabilities[\"Power Meter\"] !== undefined) {\t\n        thisCharacteristic = this.getaddService(Service.Outlet).addCharacteristic(EnergyCharacteristics.CurrentConsumption1)\n        thisCharacteristic.on('get', function(callback) { callback(null, Math.round(that.device.attributes.power)); });\n\t\tthat.platform.addAttributeUsage(\"power\", this.deviceid, thisCharacteristic);\n    }\n\n    if (device.capabilities[\"Acceleration Sensor\"] !== undefined) {\n        if (this.deviceGroup == 'unknown') this.deviceGroup = \"sensor\";\n    }\n\n    if (device.capabilities[\"Three Axis\"] !== undefined) {\n        if (this.deviceGroup == 'unknown') this.deviceGroup = \"sensor\";\n    }\n\n\tif (device.capabilities[\"Thermostat\"] !== undefined) {\n        this.deviceGroup = \"thermostats\";\n        \n\t\tthisCharacteristic = this.getaddService(Service.Thermostat).getCharacteristic(Characteristic.CurrentHeatingCoolingState)\n        thisCharacteristic.on('get', function(callback) {\n                switch (that.device.attributes.thermostatOperatingState) {\n                    case \"pending cool\":\n                    case \"cooling\":\n                        callback(null, Characteristic.CurrentHeatingCoolingState.COOL);\n                        break;\n                    case \"pending heat\":\n                    case \"heating\":\n                        callback(null, Characteristic.CurrentHeatingCoolingState.HEAT);\n                        break;\n                    default: //The above list should be inclusive, but we need to return something if they change stuff.\n                        //TODO: Double check if Smartthings can send \"auto\" as operatingstate. I don't think it can.\n                        callback(null, Characteristic.CurrentHeatingCoolingState.OFF);\n                        break;\n                }\n            });\n\t\tthat.platform.addAttributeUsage(\"thermostatOperatingState\", this.deviceid, thisCharacteristic);\n\n        //Handle the Target State\n        thisCharacteristic = this.getaddService(Service.Thermostat).getCharacteristic(Characteristic.TargetHeatingCoolingState)\n        thisCharacteristic.on('get', function(callback) {\n                switch (that.device.attributes.thermostatMode) {\n                    case \"cool\":\n                        callback(null, Characteristic.TargetHeatingCoolingState.COOL);\n                        break;\n                    case \"emergency heat\":\n                    case \"heat\":\n                        callback(null, Characteristic.TargetHeatingCoolingState.HEAT);\n                        break;\n                    case \"auto\":\n                        callback(null, Characteristic.TargetHeatingCoolingState.AUTO);\n                        break;\n                    default: //The above list should be inclusive, but we need to return something if they change stuff.\n                        callback(null, Characteristic.TargetHeatingCoolingState.OFF);\n                        break;\n                }\n            })\n        thisCharacteristic.on('set', function(value, callback) {\n                switch (value) {\n                    case Characteristic.TargetHeatingCoolingState.COOL:\n                        that.platform.api.runCommand(callback, that.deviceid, \"cool\");\n                        that.device.attributes.thermostatMode = 'cool';\n                        break;\n                    case Characteristic.TargetHeatingCoolingState.HEAT:\n                        that.platform.api.runCommand(callback, that.deviceid, \"heat\");\n                        that.device.attributes.thermostatMode = 'heat';\n                        break;\n                    case Characteristic.TargetHeatingCoolingState.AUTO:\n                        that.platform.api.runCommand(callback, that.deviceid, \"auto\");\n                        that.device.attributes.thermostatMode = 'auto';\n                        break;\n                    case Characteristic.TargetHeatingCoolingState.OFF:\n                        that.platform.api.runCommand(callback, that.deviceid, \"off\");\n                        that.device.attributes.thermostatMode = 'off';\n                        break;\n                }\n            });\n\t\tthat.platform.addAttributeUsage(\"thermostatMode\", this.deviceid, thisCharacteristic);\n\n        if (device.capabilities[\"Relative Humidity Measurement\"] !== undefined) {\n            thisCharacteristic = this.getaddService(Service.Thermostat).getCharacteristic(Characteristic.CurrentRelativeHumidity)\n            thisCharacteristic.on('get', function(callback) {\n                    callback(null, parseInt(that.device.attributes.humidity));\n                });\n\t\t\tthat.platform.addAttributeUsage(\"humidity\", this.deviceid, thisCharacteristic);\n        }\n\n        thisCharacteristic = this.getaddService(Service.Thermostat).getCharacteristic(Characteristic.CurrentTemperature)\n        thisCharacteristic.on('get', function(callback) {\n                if (that.platform.temperature_unit == 'C')\n                    callback(null, Math.round(that.device.attributes.temperature*10)/10);\n                else\n                    callback(null, Math.round(((that.device.attributes.temperature - 32) / 1.8)*10)/10);\n            });\n\t\tthat.platform.addAttributeUsage(\"temperature\", this.deviceid, thisCharacteristic);\n\n        thisCharacteristic = this.getaddService(Service.Thermostat).getCharacteristic(Characteristic.TargetTemperature)\n        thisCharacteristic.on('get', function(callback) {\n                var temp = undefined;\n                switch (that.device.attributes.thermostatMode) {\n                    case \"cool\":\n                        temp = that.device.attributes.coolingSetpoint;\n                        break;\n                    case \"emergency heat\":\n                    case \"heat\":\n                        temp = that.device.attributes.heatingSetpoint;\n                        break;\n                    default: //This should only refer to auto\n                       // Choose closest target as single target\n                        var high = that.device.attributes.coolingSetpoint;\n                        var low = that.device.attributes.heatingSetpoint;\n                        var cur = that.device.attributes.temperature;\n                        temp = Math.abs(high - cur) < Math.abs(cur - low) ? high : low;\n                        break;\n                }\n                if (!temp) \n                    callback('Unknown');\n                else if (that.platform.temperature_unit == 'C')\n                    callback(null, Math.round(temp*10)/10);\n                else\n                    callback(null, Math.round(((temp - 32) / 1.8)*10)/10);\n            })\n        thisCharacteristic.on('set', function(value, callback) {\n                //Convert the Celsius value to the appropriate unit for Smartthings\n                var temp = value;\n                if (that.platform.temperature_unit == 'C')\n                    temp = value;\n                else\n                    temp = ((value * 1.8) + 32);\n\n                //Set the appropriate temperature unit based on the mode\n                switch (that.device.attributes.thermostatMode) {\n                    case \"cool\":\n                        that.platform.api.runCommand(callback, that.deviceid, \"setCoolingSetpoint\", {\n                            value1: temp\n                        });\n                        that.device.attributes.coolingSetpoint = temp;\n                        break;\n                    case \"emergency heat\":\n                    case \"heat\":\n                        that.platform.api.runCommand(callback, that.deviceid, \"setHeatingSetpoint\", {\n                            value1: temp\n                        });\n                        that.device.attributes.heatingSetpoint = temp;\n                        break;\n                    default: //This should only refer to auto\n                       \t// Choose closest target as single target\n                        var high = that.device.attributes.coolingSetpoint;\n                        var low = that.device.attributes.heatingSetpoint;\n                        var cur = that.device.attributes.temperature;\n                        var isHighTemp = Math.abs(high - cur) < Math.abs(cur - low);\n                        if (isHighTemp) {\n                           that.platform.api.runCommand(callback, that.deviceid, \"setCoolingSetpoint\", { value1: temp });\n                        } else {\n                           that.platform.api.runCommand(null, that.deviceid, \"setHeatingSetpoint\", { value1: temp });\n                        }\n                        break;\n                }\n            });\n\t\tthat.platform.addAttributeUsage(\"thermostatMode\", this.deviceid, thisCharacteristic);\n\t\tthat.platform.addAttributeUsage(\"coolingSetpoint\", this.deviceid, thisCharacteristic);\n\t\tthat.platform.addAttributeUsage(\"heatingSetpoint\", this.deviceid, thisCharacteristic);\n\t\tthat.platform.addAttributeUsage(\"temperature\", this.deviceid, thisCharacteristic);\n\n        thisCharacteristic = this.getaddService(Service.Thermostat).getCharacteristic(Characteristic.TemperatureDisplayUnits)\n        thisCharacteristic.on('get', function(callback) {\n                if (platform.temperature_unit == \"C\")\n                    callback(null, Characteristic.TemperatureDisplayUnits.CELSIUS);\n                else\n                    callback(null, Characteristic.TemperatureDisplayUnits.FAHRENHEIT);\n            });\n\t\t//that.platform.addAttributeUsage(\"temperature_unit\", \"platform\", thisCharacteristic);\n\n        thisCharacteristic = this.getaddService(Service.Thermostat).getCharacteristic(Characteristic.HeatingThresholdTemperature)\n        thisCharacteristic.on('get', function(callback) {\n                if (that.platform.temperature_unit == 'C')\n                    callback(null, Math.round(that.device.attributes.heatingSetpoint*10)/10);\n                else\n                    callback(null, Math.round(((that.device.attributes.heatingSetpoint - 32) / 1.8)*10)/10);\n            })\n        thisCharacteristic.on('set', function(value, callback) {\n                //Convert the Celsius value to the appropriate unit for Smartthings\n                var temp = value;\n                if (that.platform.temperature_unit == 'C')\n                    temp = value;\n                else\n                    temp = ((value * 1.8) + 32);\n                that.platform.api.runCommand(callback, that.deviceid, \"setHeatingSetpoint\", {\n                    value1: temp\n                });\n                that.device.attributes.heatingSetpoint = temp;\n            });\n\t\tthat.platform.addAttributeUsage(\"heatingSetpoint\", this.deviceid, thisCharacteristic);\n\n        thisCharacteristic = this.getaddService(Service.Thermostat).getCharacteristic(Characteristic.CoolingThresholdTemperature)\n        thisCharacteristic.on('get', function(callback) {\n                if (that.platform.temperature_unit == 'C')\n                    callback(null, Math.round((that.device.attributes.coolingSetpoint*10))/10);\n                else\n                    callback(null, Math.round(((that.device.attributes.coolingSetpoint - 32) / 1.8)*10)/10);\n            });\n        thisCharacteristic.on('set', function(value, callback) {\n                //Convert the Celsius value to the appropriate unit for Smartthings\n                var temp = value;\n                if (that.platform.temperature_unit == 'C')\n                    temp = value;\n                else\n                    temp = ((value * 1.8) + 32);\n                that.platform.api.runCommand(callback, that.deviceid, \"setCoolingSetpoint\", {\n                    value1: temp\n                });\n                that.device.attributes.coolingSetpoint = temp;\n \t\t   });\n\t\tthat.platform.addAttributeUsage(\"coolingSetpoint\", this.deviceid, thisCharacteristic);\n    }\n    this.loadData(device, this);\n}\n\nfunction loadData(data, myObject) {\n    var that = this;\n    if (myObject !== undefined) that = myObject;\n    if (data !== undefined) {\n        this.device = data;\n        for (var i = 0; i < that.services.length; i++) {\n            for (var j = 0; j < that.services[i].characteristics.length; j++) {\n                that.services[i].characteristics[j].getValue();\n            }\n        }\n    } else {\n        this.log.debug(\"Fetching Device Data\")\n        this.platform.api.getDevice(this.deviceid, function(data) {\n            if (data === undefined) return;\n            this.device = data;\n            for (var i = 0; i < that.services.length; i++) {\n                for (var j = 0; j < that.services[i].characteristics.length; j++) {\n                    that.services[i].characteristics[j].getValue();\n                }\n            }\n        });\n    }\n}\n\n\n\nfunction getServices() {\n    return this.services;\n}\n","/home/travis/build/npmtest/node-npmtest-homebridge-smartthings/node_modules/homebridge-smartthings/lib/customCharacteristics.js":"var inherits = require('util').inherits;\n\n\n\nfunction EnergyCharacteristics(Characteristic) {\n    this.TotalConsumption1 = function() {\n        Characteristic.call(this, 'Total Consumption (kWh*1000)', 'E863F10C-079E-48FF-8F27-9C2605A29F52');\n        this.setProps({\n            format: Characteristic.Formats.FLOAT,\n            unit: Characteristic.Units.SECONDS,\n            maxValue: 4294967295,\n            minValue: 0,\n            minStep: 1,\n            perms: [Characteristic.Perms.READ, Characteristic.Perms.NOTIFY]\n        });\n        this.value = this.getDefaultValue();\n        \n        \n    };\n    inherits(this.TotalConsumption1, Characteristic);\n\n    this.CurrentConsumption1 = function() {\n        Characteristic.call(this, 'Current Consumption (W*10)', 'E863F10D-079E-48FF-8F27-9C2605A29F52');\n        this.setProps({\n            format: Characteristic.Formats.FLOAT,\n            unit: Characteristic.Units.SECONDS,\n            maxValue: 65535,\n            minValue: 0,\n            minStep: 1,\n            perms: [Characteristic.Perms.READ, Characteristic.Perms.NOTIFY]\n        });\n        this.value = this.getDefaultValue();\n    };\n    inherits(this.CurrentConsumption1, Characteristic);\n    \n    return this;\n}\n\nmodule.exports.EnergyCharacteristics = EnergyCharacteristics;\n"}